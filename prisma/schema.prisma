generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(cuid())
  name             String
  email            String             @unique
  password         String
  role             UserRole           @default(user)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  cart_items       cart_items[]
  claims           claims[]
  conseil_requests conseil_requests[]
  reservations     reservations[]
  passwordResets   PasswordReset[]
  mustChangePassword Boolean          @default(false)

  @@map("users")
}

model BalloonColorToCartItem {
  A              String
  B              String
  balloon_colors balloon_colors @relation(fields: [A], references: [id], onDelete: Cascade)
  cart_items     cart_items     @relation(fields: [B], references: [id], onDelete: Cascade)

  @@id([A, B], map: "_BalloonColorToCartItem_AB_pkey")
  @@index([B], map: "_BalloonColorToCartItem_B_index")
  @@map("_BalloonColorToCartItem")
}

model balloon_colors {
  id                     String                   @id
  name                   String
  hex                    String
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime
  BalloonColorToCartItem BalloonColorToCartItem[]
}

model cart_items {
  id                     String                   @id
  packId                 String
  startDate              DateTime
  endDate                DateTime
  deliveryOption         Boolean                  @default(false)
  customMessage          String?
  userId                 String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime
  BalloonColorToCartItem BalloonColorToCartItem[]
  packs                  packs                    @relation(fields: [packId], references: [id])
  users                  User?                    @relation(fields: [userId], references: [id])
}

model claims {
  id          String      @id
  title       String
  description String?
  status      ClaimStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  userId      String
  users       User        @relation(fields: [userId], references: [id])
}

model conseil_requests {
  id          String        @id
  name        String
  firstName   String?
  lastName    String?
  email       String
  phone       String
  company     String?
  eventType   String
  eventDate   DateTime
  guestCount  Int
  location    String
  budget      String
  description String
  status      ConseilStatus @default(pending)
  createdAt   DateTime      @default(now())
  userId      String?
  users       User?         @relation(fields: [userId], references: [id])
}

model faq_items {
  id        String      @id
  question  String
  answer    String
  category  FAQCategory
  createdAt DateTime    @default(now())
  updatedAt DateTime
}

model packs {
  id           String         @id @default(cuid())
  name         String
  category     PackCategory
  description  String
  price        Float
  images       String[]
  features     String[]
  rating       Float          @default(0)
  reviewCount  Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  cart_items   cart_items[]
  reservations reservations[]
}

model reservations {
  id            String            @id
  packId        String
  startDate     DateTime
  endDate       DateTime
  clientName    String
  clientEmail   String
  clientPhone   String
  customMessage String?
  status        ReservationStatus @default(pending)
  createdAt     DateTime          @default(now())
  userId        String?
  packs         packs             @relation(fields: [packId], references: [id])
  users         User?             @relation(fields: [userId], references: [id])
}

enum ClaimStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  REJECTED
}

enum ConseilStatus {
  pending
  inProgress
  completed
}

enum FAQCategory {
  general
  packs
  reservation
  personnalisation
  payment
}

enum PackCategory {
  anniversaire
  mariage
  entreprise
  autre
  anniversaireballons
}

enum ReservationStatus {
  pending
  confirmed
  cancelled
}

enum UserRole {
  user
  admin
}

model PasswordReset {
  id          String   @id @default(cuid())
  token       String   @unique
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires     DateTime
  createdAt   DateTime @default(now())
  used        Boolean  @default(false)

  @@index([token])
  @@map("password_resets")
}
