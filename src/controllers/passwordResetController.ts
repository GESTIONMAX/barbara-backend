import { Request, Response } from 'express';
import { prisma } from '../lib/prisma';
import bcrypt from 'bcryptjs';
import crypto from 'crypto';
import { emailService } from '../services/emailService';

/**
 * Demande de r√©initialisation de mot de passe
 * - G√©n√®re un token unique
 * - Enregistre le token dans la base de donn√©es
 * - Envoie un email avec le lien de r√©initialisation
 */
export const forgotPassword = async (req: Request, res: Response) => {
  try {
    const { email } = req.body;
    console.log(`üîç Demande de r√©initialisation pour: ${email}`);

    // V√©rifier si l'utilisateur existe
    const user = await prisma.user.findUnique({ where: { email } });

    // Pour des raisons de s√©curit√©, nous ne r√©v√©lons pas si l'email existe ou non
    if (!user) {
      console.log(`‚ö†Ô∏è Utilisateur non trouv√©: ${email}`);
      return res.status(200).json({
        success: true,
        message: 'Si cet email est associ√© √† un compte, vous recevrez un lien de r√©initialisation'
      });
    }

    // G√©n√©rer un token al√©atoire et s√©curis√©
    const resetToken = crypto.randomBytes(32).toString('hex');
    
    // Calculer une date d'expiration (30 minutes)
    const expiresAt = new Date();
    expiresAt.setMinutes(expiresAt.getMinutes() + 30);

    // Supprimer tous les tokens existants pour cet utilisateur
    await prisma.passwordReset.deleteMany({
      where: { userId: user.id }
    });

    // Cr√©er un nouveau token de r√©initialisation
    await prisma.passwordReset.create({
      data: {
        token: resetToken,
        userId: user.id,
        expires: expiresAt
      }
    });

    // Envoyer l'email de r√©initialisation
    const emailResult = await emailService.sendPasswordResetEmail(
      user.email, 
      resetToken, 
      user.name
    );

    if (!emailResult.success) {
      console.error('‚ùå √âchec de l\'envoi de l\'email:', emailResult.error);
      return res.status(500).json({
        success: false,
        message: 'Erreur lors de l\'envoi de l\'email de r√©initialisation'
      });
    }

    console.log(`‚úÖ Email de r√©initialisation envoy√© √†: ${email}`);
    return res.status(200).json({
      success: true,
      message: 'Email de r√©initialisation envoy√©'
    });

  } catch (error) {
    console.error('‚ùå Erreur forgotPassword:', error);
    return res.status(500).json({
      success: false,
      message: 'Erreur serveur lors de la demande de r√©initialisation'
    });
  }
};

/**
 * Validation du token et r√©initialisation du mot de passe
 * - V√©rifie que le token existe et est valide
 * - Met √† jour le mot de passe de l'utilisateur
 * - Invalide le token utilis√©
 */
export const resetPassword = async (req: Request, res: Response) => {
  try {
    const { token, password } = req.body;

    // Rechercher le token de r√©initialisation
    const passwordReset = await prisma.passwordReset.findUnique({
      where: { token },
      include: { user: true }
    });

    // V√©rifier si le token existe
    if (!passwordReset) {
      return res.status(400).json({
        success: false,
        message: 'Token de r√©initialisation invalide'
      });
    }

    // V√©rifier si le token a d√©j√† √©t√© utilis√©
    if (passwordReset.used) {
      return res.status(400).json({
        success: false,
        message: 'Ce lien de r√©initialisation a d√©j√† √©t√© utilis√©'
      });
    }

    // V√©rifier si le token a expir√©
    if (new Date() > passwordReset.expires) {
      return res.status(400).json({
        success: false,
        message: 'Le lien de r√©initialisation a expir√©'
      });
    }

    // Hacher le nouveau mot de passe
    const hashedPassword = await bcrypt.hash(password, 12);

    // Mettre √† jour le mot de passe de l'utilisateur
    await prisma.user.update({
      where: { id: passwordReset.userId },
      data: { 
        password: hashedPassword,
        mustChangePassword: false // R√©initialisation r√©ussie
      }
    });

    // Marquer le token comme utilis√©
    await prisma.passwordReset.update({
      where: { id: passwordReset.id },
      data: { used: true }
    });

    console.log(`‚úÖ Mot de passe r√©initialis√© pour: ${passwordReset.user.email}`);
    return res.status(200).json({
      success: true,
      message: 'Votre mot de passe a √©t√© r√©initialis√© avec succ√®s'
    });

  } catch (error) {
    console.error('‚ùå Erreur resetPassword:', error);
    return res.status(500).json({
      success: false,
      message: 'Erreur serveur lors de la r√©initialisation du mot de passe'
    });
  }
};

/**
 * Changement de mot de passe par l'utilisateur connect√©
 * - V√©rifie l'ancien mot de passe
 * - Met √† jour le mot de passe si la v√©rification r√©ussit
 */
export const changePassword = async (req: Request, res: Response) => {
  try {
    // L'ID de l'utilisateur est fourni par le middleware d'authentification
    if (!req.user) {
      return res.status(401).json({
        success: false,
        message: 'Utilisateur non authentifi√©'
      });
    }

    const { currentPassword, newPassword } = req.body;
    const userId = req.user.id;

    // R√©cup√©rer l'utilisateur avec son mot de passe actuel
    const user = await prisma.user.findUnique({
      where: { id: userId },
      select: { password: true, email: true, mustChangePassword: true }
    });

    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Utilisateur non trouv√©'
      });
    }

    // V√©rifier l'ancien mot de passe
    const isPasswordValid = await bcrypt.compare(currentPassword, user.password);
    if (!isPasswordValid) {
      return res.status(400).json({
        success: false,
        message: 'Mot de passe actuel incorrect'
      });
    }

    // V√©rifier que le nouveau mot de passe est diff√©rent de l'ancien
    const isSamePassword = await bcrypt.compare(newPassword, user.password);
    if (isSamePassword) {
      return res.status(400).json({
        success: false,
        message: 'Le nouveau mot de passe doit √™tre diff√©rent de l\'ancien'
      });
    }

    // Hacher le nouveau mot de passe
    const hashedPassword = await bcrypt.hash(newPassword, 12);

    // Mettre √† jour le mot de passe
    await prisma.user.update({
      where: { id: userId },
      data: { 
        password: hashedPassword,
        mustChangePassword: false // Le mot de passe a √©t√© chang√© avec succ√®s
      }
    });

    console.log(`‚úÖ Mot de passe chang√© pour: ${user.email}`);
    return res.status(200).json({
      success: true,
      message: 'Votre mot de passe a √©t√© modifi√© avec succ√®s'
    });

  } catch (error) {
    console.error('‚ùå Erreur changePassword:', error);
    return res.status(500).json({
      success: false,
      message: 'Erreur serveur lors du changement de mot de passe'
    });
  }
};
