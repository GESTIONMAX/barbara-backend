#!/bin/sh
echo "=== D√âMARRAGE DE BARBARA BACKEND ==="
echo "V√©rification des variables d'environnement essentielles :"
echo "DATABASE_URL: ${DATABASE_URL:0:15}... (tronqu√© pour s√©curit√©)"
echo "NODE_ENV: $NODE_ENV"
echo "JWT_SECRET: ${JWT_SECRET:0:3}... (tronqu√© pour s√©curit√©)"
echo "FRONTEND_URL: $FRONTEND_URL"
echo "PORT: $PORT"

# Corriger la variable DATABASE_URL si elle commence par DATABASE_URL=
if [[ "$DATABASE_URL" == DATABASE_URL=* ]]; then
    echo "‚ö†Ô∏è DATABASE_URL mal format√©e, application de correctif..."
    # Extraire la vraie valeur en supprimant le pr√©fixe DATABASE_URL=
    FIXED_URL=$(echo "$DATABASE_URL" | sed 's/^DATABASE_URL=//')
    # Supprimer les guillemets d'√©chappement si pr√©sents
    FIXED_URL=$(echo "$FIXED_URL" | sed 's/^\\"//;s/\\"$//')
    # Exporter la variable corrig√©e
    export DATABASE_URL="$FIXED_URL"
    echo "‚úÖ DATABASE_URL corrig√©e: ${DATABASE_URL:0:15}... (tronqu√© pour s√©curit√©)"
fi

# Exporter explicitement la variable dans le format attendu par Prisma
if [[ "$DATABASE_URL" != postgresql://* && "$DATABASE_URL" != postgres://* ]]; then
    echo "‚ö†Ô∏è DATABASE_URL n'a pas le bon format, essai de plusieurs configurations..."
    
    # Initialiser la variable de succ√®s
    CONNECTION_SUCCESS=0
    
    # Liste de potentiels noms d'h√¥tes √† tester
    HOSTS=("postgresql-database-q84so88cwcskg80og0wo4ck0" "postgres" "coolify-postgres" "postgresql" "postgres-database" "database" "q84so88cwcskg80og0wo4ck0" "localhost")
    PORTS=("5432" "5433" "5434")
    
    # Afficher les informations r√©seau pour diagnostiquer les probl√®mes de connexion
    echo "--- Informations r√©seau ---"
    echo "Hostname de ce conteneur: $(hostname)"
    echo "Configuration r√©seau:"
    ip addr show | grep -E "inet " || echo "Commande ip addr non disponible"
    
    # V√©rifier si l'URL publique est disponible
    echo "--- Test de connexion avec l'URL publique ---"
    if [ ! -z "${POSTGRES_URL_PUBLIC}" ]; then
        PUBLIC_URL=$(echo "${POSTGRES_URL_PUBLIC}" | sed 's/^POSTGRES_URL_PUBLIC=//')
        if [[ "$PUBLIC_URL" == postgresql://* || "$PUBLIC_URL" == postgres://* ]]; then
            export DATABASE_URL="$PUBLIC_URL"
            echo "Essai avec l'URL publique: ${DATABASE_URL:0:15}... (tronqu√© pour s√©curit√©)"
            npx prisma db execute --stdin <<< "SELECT 1;" > /dev/null 2>&1
            if [ $? -eq 0 ]; then
                echo "‚úÖ Connexion r√©ussie avec l'URL publique!"
                CONNECTION_SUCCESS=1
            fi
        fi
    else
        echo "Variable POSTGRES_URL_PUBLIC non d√©finie"
    fi
    
    # Si la connexion avec l'URL publique a √©chou√©, tester d'autres combinaisons
    if [ $CONNECTION_SUCCESS -eq 0 ]; then
        # Format de base de l'URL
        URL_BASE="postgresql://postgres:${DB_PASSWORD}@HOST:PORT/postgres"
        
        # Tester chaque combinaison d'h√¥te et de port
        for host in "${HOSTS[@]}"; do
            for port in "${PORTS[@]}"; do
                CURRENT_URL=${URL_BASE/HOST/$host}
                CURRENT_URL=${CURRENT_URL/PORT/$port}
                echo "Essai avec: $host:$port"
                export DATABASE_URL=$CURRENT_URL
                npx prisma db execute --stdin <<< "SELECT 1;" > /dev/null 2>&1
                if [ $? -eq 0 ]; then
                    echo "‚úÖ Connexion r√©ussie avec l'h√¥te: $host sur le port $port"
                    CONNECTION_SUCCESS=1
                    break 2
                fi
            done
        done
    fi
    
    # Si aucune connexion n'a r√©ussi, essayer avec des options sp√©ciales
    if [ $CONNECTION_SUCCESS -eq 0 ]; then
        echo "--- Tests avec des options sp√©ciales ---"
        
        # Tester avec l'URL interne et le SSL d√©sactiv√©
        echo "Test avec SSL d√©sactiv√©"
        export DATABASE_URL="postgresql://postgres:${DB_PASSWORD}@postgresql-database-q84so88cwcskg80og0wo4ck0:5432/postgres?sslmode=disable"
        npx prisma db execute --stdin <<< "SELECT 1;" > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            echo "‚úÖ Connexion r√©ussie avec SSL d√©sactiv√©"
            CONNECTION_SUCCESS=1
        fi
        
        # Si toujours pas de connexion, tenter la configuration de test direct
        if [ $CONNECTION_SUCCESS -eq 0 ]; then
            echo "Dernier essai avec l'URL par d√©faut et affichage des erreurs d√©taill√©es"
            export DATABASE_URL="postgresql://postgres:${DB_PASSWORD}@postgresql-database-q84so88cwcskg80og0wo4ck0:5432/postgres"
            npx prisma db execute --stdin <<< "SELECT 1;"
        fi
    fi
fi

# V√©rifier le contenu du sch√©ma Prisma
echo "üìÑ Contenu du sch√©ma Prisma :"
cat ./prisma/schema.prisma

# Tester la connexion √† la base de donn√©es
echo "Test de connexion √† la base de donn√©es..."
npx prisma db execute --stdin <<EOF
SELECT 1;
EOF

# Statut du test de connexion
DB_STATUS=$?
if [ $DB_STATUS -eq 0 ]; then
    echo "‚úÖ Connexion √† la base de donn√©es r√©ussie!"
else
    echo "‚ùå ERREUR: √âchec de connexion √† la base de donn√©es (code: $DB_STATUS)"
fi

# D√©marrer l'application avec redirection des erreurs
echo "D√©marrage de l'application..."
node dist/index.js 2>&1 | tee /tmp/app.log
